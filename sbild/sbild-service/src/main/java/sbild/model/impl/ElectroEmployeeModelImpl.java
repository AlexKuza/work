/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sbild.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import sbild.model.ElectroEmployee;
import sbild.model.ElectroEmployeeModel;
import sbild.model.ElectroEmployeeSoap;

import sbild.service.persistence.ElectroEmployeePK;

/**
 * The base model implementation for the ElectroEmployee service. Represents a row in the &quot;GB_ElectroEmployee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ElectroEmployeeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ElectroEmployeeImpl}.
 * </p>
 *
 * @author liferay
 * @see ElectroEmployeeImpl
 * @generated
 */
@JSON(strict = true)
public class ElectroEmployeeModelImpl
	extends BaseModelImpl<ElectroEmployee> implements ElectroEmployeeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a electro employee model instance should use the <code>ElectroEmployee</code> interface instead.
	 */
	public static final String TABLE_NAME = "GB_ElectroEmployee";

	public static final Object[][] TABLE_COLUMNS = {
		{"emplId", Types.BIGINT}, {"etypeId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("emplId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("etypeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GB_ElectroEmployee (emplId LONG not null,etypeId LONG not null,primary key (emplId, etypeId))";

	public static final String TABLE_SQL_DROP = "drop table GB_ElectroEmployee";

	public static final String ORDER_BY_JPQL =
		" ORDER BY electroEmployee.id.emplId ASC, electroEmployee.id.etypeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GB_ElectroEmployee.emplId ASC, GB_ElectroEmployee.etypeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPLID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ETYPEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ElectroEmployee toModel(ElectroEmployeeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ElectroEmployee model = new ElectroEmployeeImpl();

		model.setEmplId(soapModel.getEmplId());
		model.setEtypeId(soapModel.getEtypeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ElectroEmployee> toModels(
		ElectroEmployeeSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ElectroEmployee> models = new ArrayList<ElectroEmployee>(
			soapModels.length);

		for (ElectroEmployeeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ElectroEmployeeModelImpl() {
	}

	@Override
	public ElectroEmployeePK getPrimaryKey() {
		return new ElectroEmployeePK(_emplId, _etypeId);
	}

	@Override
	public void setPrimaryKey(ElectroEmployeePK primaryKey) {
		setEmplId(primaryKey.emplId);
		setEtypeId(primaryKey.etypeId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ElectroEmployeePK(_emplId, _etypeId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ElectroEmployeePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ElectroEmployee.class;
	}

	@Override
	public String getModelClassName() {
		return ElectroEmployee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ElectroEmployee, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ElectroEmployee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ElectroEmployee, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ElectroEmployee)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ElectroEmployee, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ElectroEmployee, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ElectroEmployee)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ElectroEmployee, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ElectroEmployee, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ElectroEmployee>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ElectroEmployee.class.getClassLoader(), ElectroEmployee.class,
			ModelWrapper.class);

		try {
			Constructor<ElectroEmployee> constructor =
				(Constructor<ElectroEmployee>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ElectroEmployee, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ElectroEmployee, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ElectroEmployee, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<ElectroEmployee, Object>>();
		Map<String, BiConsumer<ElectroEmployee, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ElectroEmployee, ?>>();

		attributeGetterFunctions.put("emplId", ElectroEmployee::getEmplId);
		attributeSetterBiConsumers.put(
			"emplId",
			(BiConsumer<ElectroEmployee, Long>)ElectroEmployee::setEmplId);
		attributeGetterFunctions.put("etypeId", ElectroEmployee::getEtypeId);
		attributeSetterBiConsumers.put(
			"etypeId",
			(BiConsumer<ElectroEmployee, Long>)ElectroEmployee::setEtypeId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmplId() {
		return _emplId;
	}

	@Override
	public void setEmplId(long emplId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emplId = emplId;
	}

	@JSON
	@Override
	public long getEtypeId() {
		return _etypeId;
	}

	@Override
	public void setEtypeId(long etypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_etypeId = etypeId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ElectroEmployee toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ElectroEmployee>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ElectroEmployeeImpl electroEmployeeImpl = new ElectroEmployeeImpl();

		electroEmployeeImpl.setEmplId(getEmplId());
		electroEmployeeImpl.setEtypeId(getEtypeId());

		electroEmployeeImpl.resetOriginalValues();

		return electroEmployeeImpl;
	}

	@Override
	public int compareTo(ElectroEmployee electroEmployee) {
		ElectroEmployeePK primaryKey = electroEmployee.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ElectroEmployee)) {
			return false;
		}

		ElectroEmployee electroEmployee = (ElectroEmployee)object;

		ElectroEmployeePK primaryKey = electroEmployee.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ElectroEmployee> toCacheModel() {
		ElectroEmployeeCacheModel electroEmployeeCacheModel =
			new ElectroEmployeeCacheModel();

		electroEmployeeCacheModel.electroEmployeePK = getPrimaryKey();

		electroEmployeeCacheModel.emplId = getEmplId();

		electroEmployeeCacheModel.etypeId = getEtypeId();

		return electroEmployeeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ElectroEmployee, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ElectroEmployee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ElectroEmployee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ElectroEmployee)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ElectroEmployee, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ElectroEmployee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ElectroEmployee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ElectroEmployee)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ElectroEmployee>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _emplId;
	private long _etypeId;

	public <T> T getColumnValue(String columnName) {
		Function<ElectroEmployee, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ElectroEmployee)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("emplId", _emplId);
		_columnOriginalValues.put("etypeId", _etypeId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("emplId", 1L);

		columnBitmasks.put("etypeId", 2L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ElectroEmployee _escapedModel;

}